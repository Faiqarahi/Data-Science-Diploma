{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "from sklearn.cluster import KMeans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "Airlines = pd.read_csv(\"EastWestAirlines.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalization function \n",
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "scaled_Airlines_df = scaler.fit_transform(Airlines.iloc[:,1:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "wcss = []\n",
    "for i in range(1, 11):\n",
    "    kmeans = KMeans(n_clusters=i,random_state=0)\n",
    "    kmeans.fit(scaled_Airlines_df)\n",
    "    wcss.append(kmeans.inertia_)\n",
    "    \n",
    "plt.plot(range(1, 11), wcss)\n",
    "plt.title('Elbow Method')\n",
    "plt.xlabel('Number of clusters')\n",
    "plt.ylabel('WCSS')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KMeans(n_clusters=7, random_state=42)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Build Cluster algorithm\n",
    "from sklearn.cluster import KMeans\n",
    "clusters_new = KMeans(7, random_state=42)\n",
    "clusters_new.fit(scaled_Airlines_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Assign clusters to the data set\n",
    "Airlines['clusterid_new'] = clusters_new.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.39739148e-01, -1.06243367e-01, -5.04469731e-01,\n",
       "        -9.82418871e-02, -5.85365869e-02, -4.59283998e-01,\n",
       "        -3.59961117e-01, -1.39406497e-01, -1.48362274e-01,\n",
       "         7.83479496e-01, -1.53021159e-01],\n",
       "       [ 4.69839654e-01, -1.12402786e-01,  1.32429420e+00,\n",
       "        -9.82418871e-02, -5.33067064e-02,  1.06316276e+00,\n",
       "         7.95907634e-01, -7.21017876e-02, -8.17047594e-02,\n",
       "         3.24476957e-01,  6.63354403e-01],\n",
       "       [-3.67473217e-01, -1.39442973e-01, -5.73849414e-01,\n",
       "        -9.82418871e-02, -6.27665798e-02, -5.09819738e-01,\n",
       "        -5.02487867e-01, -2.08969960e-01, -2.28064197e-01,\n",
       "        -9.19010385e-01, -4.71493142e-01],\n",
       "       [ 1.16052271e+00,  4.36020719e-01,  1.67307550e-01,\n",
       "        -9.82418871e-02, -6.27665798e-02,  6.94407196e-01,\n",
       "         1.77785138e+00,  3.79919478e+00,  4.09529133e+00,\n",
       "         2.76357234e-01,  8.83748240e-01],\n",
       "       [-4.68896637e-02, -1.56235600e-01, -6.68227273e-01,\n",
       "         9.03825361e+00, -6.27665798e-02, -1.01665326e-01,\n",
       "         6.17851143e-01,  8.75493989e-02,  2.20346809e-01,\n",
       "        -7.24639805e-02,  5.17838824e-02],\n",
       "       [ 6.39719256e-01, -8.44329231e-02,  1.02208440e+00,\n",
       "        -9.82418871e-02,  1.56462993e+01,  3.17969131e+00,\n",
       "         1.71461374e+00,  3.32926913e-02,  5.96953922e-02,\n",
       "         2.39872612e-01,  3.37527346e-01],\n",
       "       [ 4.45857477e-01,  6.90583543e+00, -5.65880291e-03,\n",
       "        -9.82418871e-02, -6.27665798e-02,  9.28299907e-02,\n",
       "         9.35266113e-02,  3.71896926e-01,  4.06096045e-01,\n",
       "        -9.20272587e-02,  3.75611713e-01]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#these are standardized values.\n",
    "clusters_new.cluster_centers_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>clusterid_new</th>\n",
       "      <th>ID#</th>\n",
       "      <th>Balance</th>\n",
       "      <th>Qual_miles</th>\n",
       "      <th>cc1_miles</th>\n",
       "      <th>cc2_miles</th>\n",
       "      <th>cc3_miles</th>\n",
       "      <th>Bonus_miles</th>\n",
       "      <th>Bonus_trans</th>\n",
       "      <th>Flight_miles_12mo</th>\n",
       "      <th>Flight_trans_12</th>\n",
       "      <th>Days_since_enroll</th>\n",
       "      <th>Award?</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1099.803468</td>\n",
       "      <td>59520.782824</td>\n",
       "      <td>61.928159</td>\n",
       "      <td>1.364988</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000826</td>\n",
       "      <td>6054.080099</td>\n",
       "      <td>8.145334</td>\n",
       "      <td>264.881916</td>\n",
       "      <td>0.810900</td>\n",
       "      <td>5736.347647</td>\n",
       "      <td>0.296449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1654.413666</td>\n",
       "      <td>120943.810711</td>\n",
       "      <td>57.163435</td>\n",
       "      <td>3.882733</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.001847</td>\n",
       "      <td>42818.045245</td>\n",
       "      <td>19.244691</td>\n",
       "      <td>359.110803</td>\n",
       "      <td>1.063712</td>\n",
       "      <td>4788.564174</td>\n",
       "      <td>0.690674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>3066.350793</td>\n",
       "      <td>36573.600276</td>\n",
       "      <td>36.246037</td>\n",
       "      <td>1.269469</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4833.745693</td>\n",
       "      <td>6.776706</td>\n",
       "      <td>167.490696</td>\n",
       "      <td>0.508615</td>\n",
       "      <td>2220.916609</td>\n",
       "      <td>0.142660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1746.311594</td>\n",
       "      <td>190539.152174</td>\n",
       "      <td>481.405797</td>\n",
       "      <td>2.289855</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>33913.355072</td>\n",
       "      <td>28.673913</td>\n",
       "      <td>5779.057971</td>\n",
       "      <td>16.905797</td>\n",
       "      <td>4689.202899</td>\n",
       "      <td>0.797101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2269.372093</td>\n",
       "      <td>68876.581395</td>\n",
       "      <td>23.255814</td>\n",
       "      <td>1.139535</td>\n",
       "      <td>2.348837</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>14689.837209</td>\n",
       "      <td>17.534884</td>\n",
       "      <td>582.627907</td>\n",
       "      <td>2.209302</td>\n",
       "      <td>3968.930233</td>\n",
       "      <td>0.395349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>1664.866667</td>\n",
       "      <td>138061.400000</td>\n",
       "      <td>78.800000</td>\n",
       "      <td>3.466667</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.066667</td>\n",
       "      <td>93927.866667</td>\n",
       "      <td>28.066667</td>\n",
       "      <td>506.666667</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>4613.866667</td>\n",
       "      <td>0.533333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>2083.603448</td>\n",
       "      <td>118527.293103</td>\n",
       "      <td>5486.241379</td>\n",
       "      <td>2.051724</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>19386.500000</td>\n",
       "      <td>12.500000</td>\n",
       "      <td>980.724138</td>\n",
       "      <td>2.913793</td>\n",
       "      <td>3928.534483</td>\n",
       "      <td>0.551724</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  clusterid_new          ID#        Balance   Qual_miles cc1_miles cc2_miles  \\\n",
       "                        mean           mean         mean      mean      mean   \n",
       "0             0  1099.803468   59520.782824    61.928159  1.364988  1.000000   \n",
       "1             1  1654.413666  120943.810711    57.163435  3.882733  1.000000   \n",
       "2             2  3066.350793   36573.600276    36.246037  1.269469  1.000000   \n",
       "3             3  1746.311594  190539.152174   481.405797  2.289855  1.000000   \n",
       "4             4  2269.372093   68876.581395    23.255814  1.139535  2.348837   \n",
       "5             5  1664.866667  138061.400000    78.800000  3.466667  1.000000   \n",
       "6             6  2083.603448  118527.293103  5486.241379  2.051724  1.000000   \n",
       "\n",
       "  cc3_miles   Bonus_miles Bonus_trans Flight_miles_12mo Flight_trans_12  \\\n",
       "       mean          mean        mean              mean            mean   \n",
       "0  1.000826   6054.080099    8.145334        264.881916        0.810900   \n",
       "1  1.001847  42818.045245   19.244691        359.110803        1.063712   \n",
       "2  1.000000   4833.745693    6.776706        167.490696        0.508615   \n",
       "3  1.000000  33913.355072   28.673913       5779.057971       16.905797   \n",
       "4  1.000000  14689.837209   17.534884        582.627907        2.209302   \n",
       "5  4.066667  93927.866667   28.066667        506.666667        1.600000   \n",
       "6  1.000000  19386.500000   12.500000        980.724138        2.913793   \n",
       "\n",
       "  Days_since_enroll    Award?  \n",
       "               mean      mean  \n",
       "0       5736.347647  0.296449  \n",
       "1       4788.564174  0.690674  \n",
       "2       2220.916609  0.142660  \n",
       "3       4689.202899  0.797101  \n",
       "4       3968.930233  0.395349  \n",
       "5       4613.866667  0.533333  \n",
       "6       3928.534483  0.551724  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Airlines.groupby('clusterid_new').agg(['mean']).reset_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cluster 3 seems to have highest flight miles in past 12 months with highest awards and good amount of bonus miles with highest numbers of miles eligible for travel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
